x-environment:
  &common-env
  - EDA_DB_HOST=postgres
  - EDA_MQ_HOST=redis
  - DJANGO_SETTINGS_MODULE=aap_eda.settings.default
  - EDA_DB_PASSWORD=secret
  - EDA_SECRET_KEY=secret
  - EDA_ALLOWED_HOSTS=['*']
  - EDA_DEPLOYMENT_TYPE=${EDA_DEPLOYMENT_TYPE:-podman}
  - EDA_WEBSOCKET_URL=${EDA_WEBSOCKET_URL:-wss://host.containers.internal/api/eda/ws/ansible-rulebook}
  - EDA_WEBSOCKET_SSL_VERIFY=no

services:
  eda-ui:
    image: "quay.io/ansible/eda-ui:${EDA_UI_IMAGE_TAG:-latest}"
    ports:
      - '8080:8080'
    depends_on:
      eda-api:
        condition: service_healthy
  eda-api:
    image: "quay.io/ansible/eda-server:${EDA_IMAGE_TAG:-main}"
    environment: *common-env
    command:
      - /bin/bash
      - -c
      - >-
        aap-eda-manage migrate 
        && aap-eda-manage create_initial_data 
        && scripts/create_superuser.sh 
        && aap-eda-manage runserver 0.0.0.0:8000
    ports:
      - '8000:8000'
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ 'CMD', 'curl', '-q', 'http://localhost:8000/_healthz' ]
      interval: 30s
      timeout: 5s
      retries: 10

  eda-worker:
    deploy:
      replicas: 2
    image: "quay.io/ansible/eda-server:${EDA_IMAGE_TAG:-main}"
    environment: *common-env
    command:
      - aap-eda-manage
      - rqworker
      - --worker-class
      - aap_eda.core.tasking.Worker
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  postgres:
    image: 'docker.io/library/postgres:13'
    environment:
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: eda
    ports:
      - '5432:5432'
    healthcheck:
      test: [ 'CMD', 'pg_isready', '-U', 'postgres' ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: 'docker.io/library/redis:7'
    ports:
      - '6379:6379'
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

volumes:
  postgres_data: {}
