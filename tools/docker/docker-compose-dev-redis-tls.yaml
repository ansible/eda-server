x-environment:
  &common-env
  - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-aap_eda.settings.development}
  - EDA_MQ_HOST=${EDA_MQ_HOST:-redis}
  - EDA_MQ_PORT=${EDA_MQ_PORT:-6379}
  - EDA_MQ_USER=${EDA_MQ_USER:-}
  - EDA_MQ_USER_PASSWORD=${EDA_MQ_USER_PASSWORD:-}
  - EDA_MQ_CLIENT_CERT_PATH=${EDA_MQ_CLIENT_CERT_PATH:-/var/lib/eda/redis-tls/client/client.crt}
  - EDA_MQ_CLIENT_KEY_PATH=${EDA_MQ_CLIENT_KEY_PATH:-/var/lib/eda/redis-tls/client/client.key}
  - EDA_MQ_CLIENT_CACERT_PATH=${EDA_MQ_CLIENT_CACERT_PATH:-/var/lib/eda/redis-tls/ca.crt}
  - EDA_DB_HOST=postgres
  - EDA_DB_PASSWORD=${EDA_DB_PASSWORD:-'secret'}
  - EDA_ALLOWED_HOSTS=['*']
  - EDA_DEPLOYMENT_TYPE=${EDA_DEPLOYMENT_TYPE:-podman}
  - EDA_WEBSOCKET_BASE_URL=${EDA_WEBSOCKET_BASE_URL:-ws://eda-ws:8000}
  - EDA_WEBSOCKET_SSL_VERIFY=no
  - EDA_PODMAN_SOCKET_URL=tcp://podman:8888
  - EDA_CONTROLLER_URL=${EDA_CONTROLLER_URL:-https://awx-example.com}
  - EDA_CONTROLLER_TOKEN=${EDA_CONTROLLER_TOKEN:-some-secret-token}
  - EDA_CONTROLLER_SSL_VERIFY=${EDA_CONTROLLER_SSL_VERIFY:-no}
  - EDA_PROTOCOL=http
  - EDA_HOST=${EDA_HOST:-eda-api:8000}
  - EDA_SERVER=http://${EDA_HOST:-eda-api:8000}
  - EDA_ANSIBLE_RULEBOOK_LOG_LEVEL=${EDA_ANSIBLE_RULEBOOK_LOG_LEVEL:-'-v'}
  - EDA_CONTAINER_NAME_PREFIX=${EDA_CONTAINER_NAME_PREFIX:-eda}
  - EDA_PODMAN_ENV_VARS=${EDA_PODMAN_ENV_VARS:-'@none None'}
  - EDA_SECRET_KEY=${EDA_SECRET_KEY:-'insecure'}
  - EDA_DEBUG=${EDA_DEBUG:-True}
  - EDA_ANSIBLE_BASE_JWT_VALIDATE_CERT=${EDA_ANSIBLE_BASE_JWT_VALIDATE_CERT:-False}
  - EDA_ANSIBLE_BASE_JWT_KEY=${EDA_ANSIBLE_BASE_JWT_KEY:-'https://localhost'}
  - EDA_PGSSLMODE=${EDA_PGSSLMODE:-allow}
  - EDA_PGSSLCERT=${EDA_PGSSLCERT:-./postgres_ssl_config/certs/server.crt}
  - EDA_PGSSLKEY=${EDA_PGSSLKEY:-./postgres_ssl_config/certs/server.key}
  - EDA_PGSSLROOTCERT=${EDA_PGSSLROOTCERT:-./postgres_ssl_config/certs/ca.crt}
  - EDA_ALLOW_LOCAL_RESOURCE_MANAGEMENT=${EDA_ALLOW_LOCAL_RESOURCE_MANAGEMENT:-True}
  - EDA_ANSIBLE_RULEBOOK_FLUSH_AFTER=${EDA_ANSIBLE_RULEBOOK_FLUSH_AFTER:-100}
  - EDA_DEFAULT_QUEUE_TIMEOUT=${EDA_DEFAULT_QUEUE_TIMEOUT:-300}
  - EDA_DEFAULT_RULEBOOK_QUEUE_TIMEOUT=${EDA_DEFAULT_RULEBOOK_QUEUE_TIMEOUT:-120}
  - EDA_RESOURCE_SERVER__URL=${EDA_RESOURCE_SERVER__URL:-'@none None'}
  - EDA_RESOURCE_SERVER__SECRET_KEY=${EDA_RESOURCE_SERVER__SECRET_KEY:-'@none None'}
  - EDA_RESOURCE_SERVER__VALIDATE_HTTPS=${EDA_RESOURCE_SERVER__VALIDATE_HTTPS:-False}
  - EDA_RESOURCE_JWT_USER_ID=${EDA_RESOURCE_JWT_USER_ID:-'@none None'}
  - EDA_ANSIBLE_BASE_MANAGED_ROLE_REGISTRY=${EDA_ANSIBLE_BASE_MANAGED_ROLE_REGISTRY:-@json {}}

services:
  podman-pre-setup:
    user: "0"
    image: ${EDA_PODMAN_IMAGE:-quay.io/containers/podman}:${EDA_PODMAN_VERSION:-v4}
    privileged: true
    command: >-
      chown -R podman /home/podman/.local/share/containers/storage
    volumes:
      - 'podman_data:/home/podman/.local/share/containers/storage'

  podman:
    user: "1000"
    image: ${EDA_PODMAN_IMAGE:-quay.io/containers/podman}:${EDA_PODMAN_VERSION:-v4}
    privileged: true
    command: >-
      podman system service --time=0 tcp://0.0.0.0:8888
    ports:
      - "${EDA_PODMAN_PORT:-8888}:8888"
    volumes:
      - 'podman_data:/home/podman/.local/share/containers/storage'
    depends_on:
     - podman-pre-setup

  certs:
    image: ${EDA_CERTBOT_IMAGE:-certbot/certbot}:${EDA_CERTBOT_VERSION:-latest}
    volumes:
      - ./postgres_ssl_config/certs:/etc/ssl/certs:z
    entrypoint:
      - sh
      - -c
      - |
        openssl genrsa -out /etc/ssl/certs/ca.key 2048
        openssl req -new -x509 -key /etc/ssl/certs/ca.key -out /etc/ssl/certs/ca.crt -subj "/CN=EDA" -days 3650
        openssl genrsa -out /etc/ssl/certs/server.key 2048
        openssl req -new -key /etc/ssl/certs/server.key -out /etc/ssl/certs/server.csr -subj "/CN=eda-postgres-1"
        openssl x509 -req -in /etc/ssl/certs/server.csr -CA /etc/ssl/certs/ca.crt -CAkey /etc/ssl/certs/ca.key -CAcreateserial -out /etc/ssl/certs/server.crt -days 3650
        chmod 600 /etc/ssl/certs/*.crt
        chmod 600 /etc/ssl/certs/*.key
    restart: on-failure

  postgres:
    image: ${EDA_POSTGRES_IMAGE:-quay.io/sclorg/postgresql-15-c9s}:${EDA_POSTGRES_VERSION:-latest}
    environment:
      POSTGRESQL_USER: eda
      POSTGRESQL_PASSWORD: secret
      POSTGRESQL_ADMIN_PASSWORD: secret
      POSTGRESQL_DATABASE: eda
    ports:
      - '${EDA_PG_PORT:-5432}:5432'
    volumes:
      - 'postgres_data:/var/lib/pgsql/data'
      - "${EDA_PGSSL_PATHCONFIG:-./postgres_ssl_config/postgresql-cfg}:/opt/app-root/src/postgresql-cfg:z"
      - "${EDA_PGSSL_PATHCERT:-./postgres_ssl_config/certs}:/opt/app-root/src/certs:z"
    healthcheck:
      test: [ 'CMD', 'pg_isready', '-U', 'postgres' ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    depends_on:
      - certs

  redis:
    image: ${EDA_REDIS_IMAGE:-quay.io/fedora/redis-6}:${EDA_REDIS_VERSION:-latest}
    ports:
      - '${EDA_MQ_PORT:-6379}:6379'
    command:
      - redis-server
      - --bind
      - 0.0.0.0
      - --port
      - "0"
      - --tls-port
      - "${EDA_MQ_PORT:-6379}"
      - --tls-cert-file
      - ${EDA_MQ_SERVER_CERT_PATH:-/var/lib/eda/redis-tls/server/server.crt}
      - --tls-key-file
      - ${EDA_MQ_SERVER_KEY_PATH:-/var/lib/eda/redis-tls/server/server.key}
      - --tls-ca-cert-file
      - ${EDA_MQ_SERVER_CACERT_PATH:-/var/lib/eda/redis-tls/ca.crt}
    healthcheck:
      test: [
        "CMD",
        "redis-cli",
        "--tls",
        "--cacert",
        "${EDA_MQ_CLIENT_CACERT_PATH:-/var/lib/eda/redis-tls/ca.crt}",
        "--cert",
        "${EDA_MQ_CLIENT_CERT_PATH:-/var/lib/eda/redis-tls/client/client.crt}",
        "--key",
        "${EDA_MQ_CLIENT_KEY_PATH:-/var/lib/eda/redis-tls/client/client.key}",
        "ping"
      ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    volumes:
      - ./redis-tls:/var/lib/eda/redis-tls:z

  eda-api:
    image: ${EDA_IMAGE:-localhost/aap-eda}
    build:
      context: ../../
      dockerfile: tools/docker/Dockerfile
    environment: *common-env
    command:
      - /bin/bash
      - -c
      - >-
        aap-eda-manage migrate
        && aap-eda-manage create_initial_data
        && scripts/create_superuser.sh
        && aap-eda-manage runserver 0.0.0.0:8000
    ports:
      - "${EDA_API_PORT:-8000}:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ 'CMD', 'curl', '-q', 'http://localhost:8000/_healthz' ]
      interval: 30s
      timeout: 5s
      retries: 10
    volumes:
      - '../../:/app/src:z'

  eda-ws:
    image: ${EDA_IMAGE:-localhost/aap-eda}
    environment: *common-env
    command:
      - /bin/bash
      - -c
      - >-
        aap-eda-manage runserver 0.0.0.0:8000
    ports:
      - "${EDA_WS_PORT:-8001}:8000"
    depends_on:
      eda-api:
        condition: service_healthy
    volumes:
      - '../../:/app/src:z'

  eda-scheduler:
    image: ${EDA_IMAGE:-localhost/aap-eda}
    environment: *common-env
    command:
      - /bin/bash
      - -c
      - >-
        aap-eda-manage scheduler
    depends_on:
      eda-api:
        condition: service_healthy
    volumes:
      - '../../:/app/src:z'

  eda-default-worker:
    image: ${EDA_IMAGE:-localhost/aap-eda}
    deploy:
      replicas: ${EDA_DEFAULT_WORKERS:-1}
    environment: *common-env
    command:
      - /bin/bash
      - -c
      - >-
        aap-eda-manage rqworker
        --worker-class aap_eda.core.tasking.DefaultWorker
    depends_on:
      eda-api:
        condition: service_healthy
    volumes:
      - '../../:/app/src:z'
    restart: always

  eda-activation-worker:
    image: ${EDA_IMAGE:-localhost/aap-eda}
    deploy:
      replicas: ${EDA_ACTIVATION_WORKERS:-2}
    command:
      - /bin/bash
      - -c
      - >-
        aap-eda-manage rqworker
        --worker-class aap_eda.core.tasking.ActivationWorker
    environment: *common-env
    depends_on:
      eda-api:
        condition: service_healthy
    volumes:
      - '../../:/app/src:z'
    restart: always

  eda-ui:
    image: ${EDA_UI_IMAGE:-quay.io/ansible/eda-ui}:${EDA_UI_VERSION:-main}
    environment: *common-env
    ports:
      - '${EDA_UI_PORT:-8443}:443'
    depends_on:
      eda-api:
        condition: service_healthy

volumes:
  postgres_data: {}
  podman_data: {}
