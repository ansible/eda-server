x-environment:
  &common-env
  - EDA_DB_HOST=postgres
  - EDA_MQ_HOST=redis
  - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-aap_eda.settings.development}
  - EDA_DEPLOYMENT_TYPE=${EDA_DEPLOYMENT_TYPE:-podman}
  - EDA_WEBSOCKET_BASE_URL=${EDA_WEBSOCKET_BASE_URL:-ws://eda-api:8000}
  - EDA_WEBSOCKET_SSL_VERIFY=no
  - EDA_PODMAN_SOCKET_URL=tcp://podman:8888
  - EDA_CONTROLLER_URL=${EDA_CONTROLLER_URL:-https://awx-example.com}
  - EDA_CONTROLLER_TOKEN=${EDA_CONTROLLER_TOKEN:-some-secret-token}
  - EDA_CONTROLLER_SSL_VERIFY=${EDA_CONTROLLER_SSL_VERIFY:-no}

services:
  podman:
    user: "1000"
    image: quay.io/containers/podman:${EDA_PODMAN_VERSION:-v4.5}
    privileged: true
    command: podman system service --time=0 tcp://0.0.0.0:8888
    ports:
      - 8888:8888
    volumes:
      - 'podman_data:/var/lib/containers/storage'

  eda-ui:
    image: "${EDA_UI_IMAGE:-quay.io/ansible/eda-ui:main}"
    ports:
      - '8080:8080'
    depends_on:
      eda-api:
        condition: service_healthy

  eda-api:
    image: "${EDA_IMAGE:-localhost/aap-eda}"
    build:
      context: ../../
      dockerfile: tools/docker/Dockerfile
    environment: *common-env
    command:
      - /bin/bash
      - -c
      - >-
        aap-eda-manage migrate 
        && aap-eda-manage create_initial_data 
        && scripts/create_superuser.sh
        && aap-eda-manage runserver 0.0.0.0:8000
    ports:
      - '8000:8000'
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ 'CMD', 'curl', '-q', 'http://localhost:8000/_healthz' ]
      interval: 30s
      timeout: 5s
      retries: 10
    volumes:
      - '../../:/app/src:z'

  eda-scheduler:
    image: "${EDA_IMAGE:-localhost/aap-eda}"
    environment: *common-env
    command:
      - /bin/bash
      - -c
      - >-
        aap-eda-manage scheduler
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - '../../:/app/src:z'

  eda-default-worker:
    deploy:
      replicas: ${EDA_DEFAULT_WORKERS:-1}
    image: "${EDA_IMAGE:-localhost/aap-eda}"
    environment: *common-env
    command:
      - aap-eda-manage
      - rqworker
      - --worker-class
      - aap_eda.core.tasking.DefaultWorker
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - '../../:/app/src:z'
    restart: always

  eda-activation-worker:
    deploy:
      replicas: ${EDA_ACTIVATION_WORKERS:-2}
    image: "${EDA_IMAGE:-localhost/aap-eda}"
    command:
      - aap-eda-manage
      - rqworker
      - --worker-class
      - aap_eda.core.tasking.ActivationWorker
    environment: *common-env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - '../../:/app/src:z'
    restart: always

  postgres:
    image: 'docker.io/library/postgres:13'
    environment:
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: eda
    ports:
      - '5432:5432'
    volumes:
      - 'postgres_data:/var/lib/postgresql/data'
    healthcheck:
      test: [ 'CMD', 'pg_isready', '-U', 'postgres' ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  redis:
    image: 'docker.io/library/redis:7'
    ports:
      - '6379:6379'
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

volumes:
  postgres_data: {}
  podman_data: {}
