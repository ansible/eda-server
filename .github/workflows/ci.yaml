name: CI

env:
  POETRY_NO_INTERACTION: 1
  EDA_QA_PATH: "./eda-qa"
  REGISTRY: quay.io
  QUAY_USER: ansible+eda_gha


on:
  push:
    branches: [ 'main' ]
  pull_request:
  merge_group:
    branches: [ 'main' ]

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  autoupdate-poetry-lock:
    runs-on: ubuntu-latest
    if: github.repository == 'ansible/eda-server'
    outputs:
      lock-changed: ${{ steps.lock-changed.outputs.lock-changed }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Run poetry lock
        run: poetry lock --no-update

      - name: Check if lock file changed
        id: lock-changed
        run: |
          if git diff --exit-code poetry.lock; then
            echo "No changes detected"
            echo "lock-changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "lock-changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Push changes
        if: steps.lock-changed.outputs.lock-changed == 'true'
        run: |
          git config --global user.email "edabot@github.com"
          git config --global user.name "edabot"
          git checkout -b autoupdate-poetry-lock
          git status
          git add poetry.lock
          git status
          git commit -m "ci(bot): update poetry lock file"
          git push origin autoupdate-poetry-lock --force

  # create-pr:
  #   needs:
  #     - autoupdate-poetry-lock
  #   if: github.repository == 'ansible/eda-server' && needs.autoupdate-poetry-lock.outputs.lock-changed == 'true'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout autoupdate-poetry-lock branch
  #       uses: actions/checkout@v3
  #       with:
  #         ref: autoupdate-poetry-lock

  #     - name: Create a Pull Request
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         branch: autoupdate-poetry-lock
  #         base: main
  #         title: "ci(bot): autoupdate poetry lock file"
  #         body: "This PR updates the poetry lock file with the latest changes."
  #         labels: "run-e2e"


  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Install poetry
  #       run: pipx install poetry

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.11'
  #         cache: 'poetry'

  #     - name: Install dependencies
  #       run: poetry install --no-root --only=lint

  #     - name: Lint with black
  #       run: poetry run black --check -- .

  #     - name: Lint with isort
  #       run: poetry run isort --check -- .

  #     - name: Lint with ruff
  #       run: poetry run ruff --show-source -- .

  #     - name: Lint with flake8
  #       run: poetry run flake8 . --count --show-source --statistics


  # test:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version:
  #         - "3.11"
  #         - "3.12"
  #   env:
  #     EDA_SECRET_KEY: 'test'
  #     EDA_DB_PASSWORD: 'secret'
  #   services:
  #     postgres:
  #       image: 'quay.io/sclorg/postgresql-15-c9s:latest'
  #       env:
  #         POSTGRESQL_USER: eda
  #         POSTGRESQL_PASSWORD: secret
  #         POSTGRESQL_ADMIN_PASSWORD: secret
  #         POSTGRESQL_DATABASE: eda
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - '5432:5432'
  #     redis: # Add this section for Redis
  #       image: 'quay.io/fedora/redis-6:latest'
  #       ports:
  #         - '6379:6379'
  #       options: >-
  #         --health-cmd "redis-cli ping"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Install poetry
  #       run: pipx install poetry

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         cache: 'poetry'

  #     - name: Install package
  #       run: poetry install -E all --only main,test

  #     - name: Check migrations are up to date
  #       run: poetry run /usr/bin/env aap-eda-manage makemigrations --dry-run --check

  #     - name: Run tests
  #       run: |
  #         poetry run python -m pytest -vv --cov=./ --cov-report=xml --junit-xml=eda-server-test-results.xml
  #         echo "GIT_SHA=$(git rev-parse "$GITHUB_SHA")" >> "$GITHUB_ENV"

  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v3
  #       with:
  #         env_vars: OS,PYTHON
  #         fail_ci_if_error: false
  #         files: ./coverage.xml
  #         flags: "unit-int-tests-${{ matrix.python-version }}"
  #         name: codecov-umbrella
  #         verbose: true

  #     - name: Upload jUnit test results (APDE CI)
  #       if: github.repository == 'ansible/eda-server' && github.ref == 'refs/heads/main'
  #       run: >-
  #         poetry run http --check-status --ignore-stdin
  #         --auth "${{ vars.PDE_ORG_RESULTS_AGGREGATOR_UPLOAD_USER }}:${{ secrets.PDE_ORG_RESULTS_UPLOAD_PASSWORD }}"
  #         -f POST "${{ vars.PDE_ORG_RESULTS_AGGREGATOR_UPLOAD_URL }}/api/results/upload/"
  #         xunit_xml@eda-server-test-results.xml
  #         component_name=eda
  #         git_commit_sha=${{ env.GIT_SHA }}
  #         git_repository_url="https://github.com/${{ github.repository }}"
