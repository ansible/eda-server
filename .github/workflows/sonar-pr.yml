# SonarCloud PR Workflow for eda-server
#
# This workflow runs on pull requests via workflow_run trigger from CI workflow.
#
# Steps overview:
# 1. Download coverage data from CI workflow
# 2. Extract and validate PR number from workflow_run context
# 3. Check for Python file changes (skip if none)
# 4. Get PR info and set environment variables
# 5. Run SonarCloud analysis with quality gate
#
# What files are scanned:
# - Only changed Python files (.py) in the PR
# - Excludes: tests, migrations, dev environments, external collections (per sonar-project.properties)
# - Quality gate focuses on new/changed code in PR only

# With much help from:
# https://community.sonarsource.com/t/how-to-use-sonarcloud-with-a-forked-repository-on-github/7363/30
# https://community.sonarsource.com/t/how-to-use-sonarcloud-with-a-forked-repository-on-github/7363/32
name: SonarCloud
on:
  workflow_run:
    workflows:
      - CI
    types:
      - completed
permissions:
  contents: read        # Repository checkout and PR branch access
  actions: read         # Download coverage artifacts from CI workflow
  pull-requests: read   # Get PR files and metadata
jobs:
  sonar:
    name: Upload to SonarCloud
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && 
      github.event.workflow_run.event == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      # Download coverage artifact from CI workflow
      - name: Download coverage artifact
        uses: dawidd6/action-download-artifact@246dbf436b23d7c49e21a7ab8204ca9ecd1fe615  #v2.27.0 sonar cannot use official Github action: actions/download-artifact
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: CI
          run_id: ${{ github.event.workflow_run.id }}
          name: coverage

      # Set PR number and event information from workflow_run
      - name: Set PR number and event type
        env:
          WORKFLOW_COMMIT_SHA: ${{ github.event.workflow_run.head_sha }}
          WORKFLOW_REPO_NAME: ${{ github.event.repository.full_name }}
        run: |
          # Extract PR number directly from workflow_run context
          PR_NUM='${{ github.event.workflow_run.pull_requests[0].number }}'
          
          # Validate it's a valid number
          if [[ "$PR_NUM" =~ ^[0-9]+$ ]] && [[ "$PR_NUM" != "0" ]] && [[ -n "$PR_NUM" ]]; then
            echo "PR_NUMBER=$PR_NUM" >> $GITHUB_ENV
          else
            echo "⚠️ No valid PR number in workflow_run context, setting to 0"
            echo "PR_NUMBER=0" >> $GITHUB_ENV
          fi
          
          echo "EVENT_TYPE=pull_request" >> $GITHUB_ENV
          echo "COMMIT_SHA=${WORKFLOW_COMMIT_SHA}" >> $GITHUB_ENV
          echo "REPO_NAME=${WORKFLOW_REPO_NAME}" >> $GITHUB_ENV

      - name: Get PR info
        if: github.event.workflow_run.event == 'pull_request' && env.PR_NUMBER != '0'
        uses: octokit/request-action@dad4362715b7fb2ddedf9772c8670824af564f0d # v2.4.0
        id: pr_info
        with:
          route: GET /repos/{repo}/pulls/{number}
          repo: ${{ env.REPO_NAME }}
          number: ${{ env.PR_NUMBER }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Print SonarCloud Analysis Decision Summary
        id: print_summary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EVENT_TYPE_VAR: ${{ env.EVENT_TYPE }}
          PR_NUMBER_VAR: ${{ env.PR_NUMBER }}
          REPO_NAME_VAR: ${{ env.REPO_NAME }}
        run: |
          echo "🔍 SonarCloud Analysis Decision Summary"
          echo "========================================"

          # Check CI Event type
          if [ "${EVENT_TYPE_VAR}" = "pull_request" ]; then
            echo "├── CI Event: ✅ Pull Request"

            # Check if PR number is valid
            if [ "${PR_NUMBER_VAR}" = "0" ]; then
              echo "├── PR Number: ❌ Invalid (not found in workflow_run context)"
              echo "└── Result: ⏭️ Skip - \"No valid PR number available\""
              exit 0
            fi

            # Valid PR number found
            echo "├── PR Number: ✅ ${PR_NUMBER_VAR}"

            # Check Python changes for PRs
            if ! files=$(gh api "repos/${REPO_NAME_VAR}/pulls/${PR_NUMBER_VAR}/files" --jq '.[].filename' 2>/dev/null); then
              echo "❌ Failed to fetch PR files from GitHub API"
              echo "This could be due to rate limiting, network issues, or permissions"
              exit 1
            fi

            # Validate filenames to prevent command injection
            # Allow safe characters: alphanumeric, dash, underscore, dot, forward slash, spaces, parentheses
            validated_files=$(echo "$files" | grep -E '^[a-zA-Z0-9/_. ()-]+$' || true)
            if [ "$files" != "$validated_files" ]; then
              echo "⚠️ Warning: Some filenames contained invalid characters and were filtered out"
            fi
            files="$validated_files"

            # Get file extensions for summary
            extensions=$(echo "$files" | sed 's/.*\.//' | sort | uniq | tr '\n' ',' | sed 's/,$//')

            # Check if any Python files were changed
            python_files=$(echo "$files" | grep '\.py$' || true)
            if [ -z "$python_files" ]; then
              echo "├── Python Changes: ❌ None (.$extensions only)"
              echo "└── Result: ⏭️ Skip - \"No Python code changes detected\""
              exit 0
            else
              python_count=$(echo "$python_files" | wc -l)
              echo "├── Python Changes: ✅ Found ($python_count files)"
              echo "└── Result: ✅ Proceed - \"Running SonarCloud analysis\""
            fi
          else
            # For push events, always proceed
            echo "├── CI Event: ✅ Push"
            echo "├── Backport Label: ➖ N/A (Push event)"
            echo "├── Python Changes: ➖ N/A (Full codebase scan)"
            echo "└── Result: ✅ Proceed - \"Running SonarCloud analysis\""
          fi

      - name: Check if analysis should proceed
        id: check_proceed
        run: |
          # This step only runs if we got past the summary step
          # which means all conditions are met for analysis
          echo "proceed=true" >> $GITHUB_OUTPUT
          echo "✅ All conditions met - proceeding with SonarCloud analysis"

      - name: Set PR info into env
        if: steps.check_proceed.outputs.proceed == 'true' && github.event.workflow_run.event == 'pull_request' && env.PR_NUMBER != '0' && steps.pr_info.outputs.data != ''
        env:
          PR_BASE_REF: ${{ fromJson(steps.pr_info.outputs.data).base.ref }}
          PR_HEAD_REF: ${{ fromJson(steps.pr_info.outputs.data).head.ref }}
        run: |
          echo "PR_BASE=${PR_BASE_REF}" >> $GITHUB_ENV
          echo "PR_HEAD=${PR_HEAD_REF}" >> $GITHUB_ENV

      - name: Get changed Python files for Sonar
        if: steps.check_proceed.outputs.proceed == 'true' && github.event.workflow_run.event == 'pull_request' && env.PR_NUMBER != '0'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_NAME_VAR: ${{ env.REPO_NAME }}
          PR_NUMBER_VAR: ${{ env.PR_NUMBER }}
        run: |
          if ! files=$(gh api "repos/${REPO_NAME_VAR}/pulls/${PR_NUMBER_VAR}/files" --jq '.[].filename' 2>/dev/null); then
            echo "❌ Failed to fetch PR files from GitHub API"
            echo "This could be due to rate limiting, network issues, or permissions"
            exit 1
          fi

          echo "All changed files in PR:"
          echo "$files"
          
          # Validate filenames to prevent command injection
          # Allow safe characters: alphanumeric, dash, underscore, dot, forward slash, spaces, parentheses
          validated_files=$(echo "$files" | grep -E '^[a-zA-Z0-9/_. ()-]+$' || true)
          if [ "$files" != "$validated_files" ]; then
            echo "⚠️ Warning: Some filenames contained invalid characters and were filtered out"
          fi
          
          python_files=$(echo "$validated_files" | grep '\.py$' || true)
          if [ -n "$python_files" ]; then
            echo "Changed Python files:"
            echo "$python_files"
            # Convert to comma-separated list for sonar.inclusions
            inclusions=$(echo "$python_files" | tr '\n' ',' | sed 's/,$//')
            echo "SONAR_INCLUSIONS=$inclusions" >> $GITHUB_ENV
            echo "Will scan these Python files: $inclusions"
          fi

      - name: Add base branch (for PRs)
        if: steps.check_proceed.outputs.proceed == 'true' && github.event.workflow_run.event == 'pull_request' && env.PR_NUMBER != '0'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER_VAR: ${{ env.PR_NUMBER }}
        run: |
          gh pr checkout "${PR_NUMBER_VAR}"

      - name: SonarCloud Scan (Pull Request)
        if: steps.check_proceed.outputs.proceed == 'true' && github.event.workflow_run.event == 'pull_request' && env.PR_NUMBER != '0'
        uses: SonarSource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602 # v6.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_SCM_REVISION: ${{ env.COMMIT_SHA }}
          SONAR_PR_KEY: ${{ env.PR_NUMBER }}
          SONAR_PR_BRANCH: ${{ env.PR_HEAD }}
          SONAR_PR_BASE: ${{ env.PR_BASE }}
          SONAR_INCLUSIONS_ARG: ${{ env.SONAR_INCLUSIONS && format('-Dsonar.inclusions={0}', env.SONAR_INCLUSIONS) || '' }}
        with:
          args: >
            -Dsonar.scm.revision=${SONAR_SCM_REVISION}
            -Dsonar.pullrequest.key=${SONAR_PR_KEY}
            -Dsonar.pullrequest.branch=${SONAR_PR_BRANCH}
            -Dsonar.pullrequest.base=${SONAR_PR_BASE}
            ${SONAR_INCLUSIONS_ARG}

      - name: SonarCloud Scan (Push)
        if: steps.check_proceed.outputs.proceed == 'true' && github.event.workflow_run.event == 'push'
        uses: SonarSource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602 # v6.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_SCM_REVISION: ${{ env.COMMIT_SHA }}
        with:
          args: >
            -Dsonar.scm.revision=${SONAR_SCM_REVISION}