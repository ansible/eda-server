version: '3'

env:
  DJANGO_SETTINGS_MODULE: "aap_eda.settings.development"

vars:
  DOCKER_COMPOSE: "docker-compose"
  DOCKER_COMPOSE_ARGS: "-p eda -f tools/docker/docker-compose.yaml"

tasks:
  default:
    desc: "Show this message and exit"
    cmds:
      - task -l
    silent: true

  dev:init:
    desc: "Initialize local development environment"
    cmds:
      - cmd: poetry install -E dev
      - cmd: pre-commit install

  manage:
    desc: "Run django management command"
    cmds:
        # This is a workaround for poetry incorrectly passing argv[0] to spawned subprocess
        #   See https://github.com/python-poetry/poetry/issues/965
      - cmd: poetry run /usr/bin/env aap-eda-manage {{.CLI_ARGS}}

  test:
    desc: "Run project tests."
    cmds:
      - poetry run python -m pytest

  lint:
    desc: "Run all linters."
    cmds:
      - task: lint:black
      - task: lint:isort
      - task: lint:ruff
      - task: lint:flake8

  lint:black:
    desc: "Check code with `black`."
    cmds:
      - poetry run black --check -- {{.CLI_ARGS | default "."}}

  lint:isort:
    desc: "Check code with `isort`."
    cmds:
      - poetry run isort --check -- {{.CLI_ARGS | default "."}}

  lint:ruff:
    desc: "Check code with `flake8`."
    cmds:
      - poetry run ruff -- {{.CLI_ARGS | default "."}}

  lint:flake8:
    desc: "Check code with `flake8`."
    cmds:
      - poetry run flake8 -- {{.CLI_ARGS | default "."}}

  format:
    desc: "Run code formatters"
    cmds:
      - task: format:isort
      - task: format:black

  format:isort:
    desc: "Format code with `isort`."
    cmds:
      - poetry run isort .

  format:black:
    desc: "Format code with `black`."
    cmds:
      - poetry run black .

  docker:
    desc: "Run docker-compose with specified CLI arguments."
    summary: |
      Run docker-compose with specified CLI arguments.

      Example:
        $ task docker -- ls
    cmds:
      - '{{.DOCKER_COMPOSE}} {{.DOCKER_COMPOSE_ARGS}} {{.CLI_ARGS}}'

  docker:build:
    desc: "Build container images."
    cmds:
      - task: docker
        vars:
          CLI_ARGS: build

  docker:up:
    desc: "Start all services."
    cmds:
      - task: docker
        vars:
          CLI_ARGS: up --detach

  docker:up:postgres:
    desc: "Start PostgreSQL service."
    cmds:
      - task: docker
        vars:
          CLI_ARGS: up --detach postgres

  docker:down:
    desc: "Stop all services."
    cmds:
      - task: docker
        vars:
          CLI_ARGS: down

  docker:purge:
    desc: "Stop all containers and delete all volumes."
    cmds:
      - task: docker
        vars:
          CLI_ARGS: down --volumes

  docker:psql:
    desc: "Open PostgreSQL console."
    cmds:
      - task: docker
        vars:
          CLI_ARGS: exec postgres psql -U postgres eda

  docker:migrate:
    desc: "Apply database migrations."
    cmds:
      - task: docker
        vars:
          CLI_ARGS: run --rm api aap-eda-manage migrate
