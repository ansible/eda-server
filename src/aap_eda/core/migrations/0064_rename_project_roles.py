# Generated by Django 4.2.7 on 2024-12-15 00:00

import logging

from django.db import migrations

logger = logging.getLogger(__name__)


def rename_project_roles_forward(apps, schema_editor):
    """
    Rename existing Project-related roles to use "EDA " prefix to avoid conflicts with Gateway consolidation.

    This function handles the forward migration by renaming existing Project roles
    to use the "EDA " prefix to prevent conflicts during Gateway consolidation.
    """
    RoleDefinition = apps.get_model("dab_rbac", "RoleDefinition")  # noqa: N806

    role_mappings = {
        "Project Admin": "EDA Project Admin",
        "Project Use": "EDA Project Use",
        "Organization Project Admin": "EDA Organization Project Admin",
    }

    for old_name, new_name in role_mappings.items():
        try:
            old_role = RoleDefinition.objects.get(name=old_name)
            new_role_exists = RoleDefinition.objects.filter(
                name=new_name
            ).exists()

            if not new_role_exists:
                old_role.name = new_name
                old_role.save()
                logger.info(f"Renamed role '{old_name}' to '{new_name}'")
            else:
                logger.warning(
                    f"Role '{new_name}' already exists, skipping rename of '{old_name}'"
                )

        except RoleDefinition.DoesNotExist:
            logger.info(f"Role '{old_name}' not found, skipping rename")


def rename_project_roles_reverse(apps, schema_editor):
    """Reverse the role renaming in case of rollback."""
    RoleDefinition = apps.get_model("dab_rbac", "RoleDefinition")  # noqa: N806

    role_mappings = {
        "EDA Project Admin": "Project Admin",
        "EDA Project Use": "Project Use",
        "EDA Organization Project Admin": "Organization Project Admin",
    }

    for old_name, new_name in role_mappings.items():
        try:
            old_role = RoleDefinition.objects.get(name=old_name)
            old_role.name = new_name
            old_role.save()
            logger.info(f"Reverted role '{old_name}' to '{new_name}'")
        except RoleDefinition.DoesNotExist:
            logger.info(f"Role '{old_name}' not found, skipping revert")


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0063_remove_decisionenvironment_credential_and_more"),
    ]

    operations = [
        migrations.RunPython(
            rename_project_roles_forward, rename_project_roles_reverse
        ),
    ]
